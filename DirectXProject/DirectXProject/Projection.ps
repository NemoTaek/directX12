Texture2D shaderTexture;
Texture2D projectionTexture;	// 투영 맵
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
}

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 viewPosition : TEXCOORD1;
};

float4 ProjectionPixelShader(PixelInputType input) : SV_TARGET
{
	float4 color;
	float3 lightDir;
	float2 projectTexCoord;
	float lightIntensity;
	float4 textureColor;
	float4 projectionColor;

	// 모든 픽셀에 대해 기본 출력 색상을 주변 광원 값으로 설정
	color = ambientColor;

	// 빛의 방향은 반대
	lightDir = -lightDirection;

	// 픽셀의 빛의 양 계산
	lightIntensity = saturate(dot(input.normal, lightDir));
	if(lightIntensity > 0.0f) {
		color += (diffuseColor * lightIntensity);
	}

	color = saturate(color);
	textureColor = shaderTexture.Sample(SampleType, input.tex);
	color = color * textureColor;

	// 투영된 텍스처 좌표 계산
	projectTexCoord.x = input.viewPosition.x / input.viewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.viewPosition.y / input.viewPosition.w / 2.0f + 0.5f;

	// 투영된 좌표가 조명의 시야에 있는지 확인. 없으면 해당 픽셀값이 주변광 값이 되도록 설정
	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y)) {
		projectionColor = projectionTexture.Sample(SampleType, projectTexCoord);
		color = projectionColor;
	}

	return color;
}