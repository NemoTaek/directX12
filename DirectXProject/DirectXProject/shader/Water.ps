SamplerState SampleType;
Texture2D reflectionTexture : register(t0);	// 반사
Texture2D refractionTexture : register(t1);	// 굴절
Texture2D normalTexture : register(t2);		// 물결

cbuffer WaterBuffer
{
	float4 refractionTint;
	float3 lightDirection;
	float waterTranslation;		// 매 프레임마다 텍스쳐 샘플링 위치를 바꾸어 물이 흐르는 것처럼 보이게 하기 위해 사용
	float reflectRefractScale;	// normal 맵에 사용되어 물결의 크기를 조절하는데 사용
	float specularShiness;
	float2 padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 reflectionPosition : TEXCOORD0;	// 반사
	float4 refractionPosition : TEXCOORD1;	// 굴절
	float3 viewDirection : TEXCOORD2;
	float2 tex1 : TEXCOORD3;
	float2 tex2 : TEXCOORD4;
};

float4 WaterPixelShader(PixelInputType input) : SV_TARGET
{
	float2 reflectTexCoord;
	float2 refractTexCoord;
	float4 normalMap1;
	float4 normalMap2;
	float3 normal1;
	float3 normal2;
	float3 resultNormal;
	float4 reflectionColor;
	float4 refractionColor;
	float3 heightView;
	float r;
	float fresnelFactor;
	float4 color;
	float3 reflection;
	float specular;

	// 물결을 표현하기 위해 Y축을 매 프레임마다 업데이트
	input.tex1.y += waterTranslation;
	input.tex2.y += waterTranslation;

	// 노말 맵 텍스처로부터 법선 샘플링(한개는 x좌표, 나머지는 y좌표)
	normalMap1 = normalTexture.Sample(SampleType, input.tex1);
	normalMap2 = normalTexture.Sample(SampleType, input.tex2);

	// 법선의 범위를 (0, 1)에서 (-1, 1)로 확장
	normal1 = (normalMap1.rgb * 2.0f) - 1.0f;
	normal2 = (normalMap2.rgb * 2.0f) - 1.0f;

	// 법선을 결합하여 법선 맵 추가
	resultNormal = normalize(normal1 + normal2);

	// 투사된 반사 및 굴절 텍스쳐 좌표 계산
	// 이 값은 0~1 사이로 표현되어야 하기 때문에 적절하게 계산해야 함
	reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
	reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;

	refractTexCoord.x = input.refractionPosition.x / input.refractionPosition.w / 2.0f + 0.5f;
	refractTexCoord.y = -input.refractionPosition.y / input.refractionPosition.w / 2.0f + 0.5f;

	// 반사와 굴절 좌표를 노말 값에 따라 흩뜨리며 물결치는 효과를 생성
	reflectTexCoord = reflectTexCoord + (resultNormal.xy * reflectRefractScale);
	refractTexCoord = refractTexCoord + (resultNormal.xy * reflectRefractScale);

	reflectionColor = reflectionTexture.Sample(SampleType, reflectTexCoord);
	refractionColor = refractionTexture.Sample(SampleType, refractTexCoord);
	refractionColor = saturate(refractionColor * refractionTint);

	// 높이 뷰 세팅
	heightView.x = input.viewDirection.y;
	heightView.y = input.viewDirection.y;
	heightView.z = input.viewDirection.y;

	// 높이를 기준으로 프레넬 방정식 계산
	// 가까운쪽은 입사각이 커서 투과가 많이 발생하고, 먼쪽은 입사각이 작아서 반사가 많이 발생한다.
	// 반사와 투과의 진행 방향은 스넬의 법칙으로 계산하고, 수량은 프레넬 방정식으로 계산한다.
	// 프레넬 방정식 : 반사계수와 투과계수에 관한 것으로, 굴절률이 다른 매질의 계면에서 반사 또는 투과 진폭을 입사 진폭으로 나눈 값
	r = (1.2f - 1.0f) / (1.2f + 1.0f);	// 반사율 = 투과율, 공기의 굴절률 = 1.0f, 물의 굴절률 = 1.2f
	fresnelFactor = max(0.0f, min(1.0f, r + (1.0f - r) * pow(1.0f - dot(resultNormal, heightView), 2)));

	// 프레넬 인수를 사용하여 최종 색상의 반사 및 굴절 색상을 선형 보간하여 계산
	// lerp(x, y, s): x*(1-s) + y*s 수식을 기반으로 계산
	color = lerp(reflectionColor, refractionColor, fresnelFactor);

	// 법선과 빛의 방향 사용하여 반사 벡터 계산
	reflection = -reflect(normalize(lightDirection), resultNormal);

	// 반사 및 카메라 위치를 기반으로 반사 조명 계산
	specular = dot(normalize(reflection), normalize(input.viewDirection));

	// 물에 검은 반점이 없도록 반사값이 양수인지 확인
	if(specular > 0.0f) {
		specular = pow(specular, specularShiness);
		color = saturate(color + specular);
	}

	return color;
}