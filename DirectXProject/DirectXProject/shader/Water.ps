SamplerState SampleType;
Texture2D reflectionTexture;	// 반사
Texture2D refractionTexture;	// 굴절
Texture2D normalTexture;		// 물결

cbuffer WaterBuffer
{
	float waterTranslation;		// 매 프레임마다 텍스쳐 샘플링 위치를 바꾸어 물이 흐르는 것처럼 보이게 하기 위해 사용
	float reflectRefractScale;	// normal 맵에 사용되어 물결의 크기를 조절하는데 사용
	float2 padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float4 reflectionPosition : TEXCOORD1;
	float4 refractionPosition : TEXCOORD2;
};

float4 WaterPixelShader(PixelInputType input) : SV_TARGET
{
	float2 reflectTexCoord;
	float2 refractTexCoord;
	float4 normalMap;
	float3 normal;
	float4 reflectionColor;
	float4 refractionColor;
	float4 color;

	// 물결을 표현하기 위해 Y축을 매 프레임마다 업데이트
	input.tex.y += waterTranslation;

	// 투사된 반사 및 굴절 텍스쳐 좌표 계산
	// 이 값은 0~1 사이로 표현되어야 하기 때문에 적절하게 계산해야 함
	reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
	reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;

	refractTexCoord.x = input.refractionPosition.x / input.refractionPosition.w / 2.0f + 0.5f;
	refractTexCoord.y = -input.refractionPosition.y / input.refractionPosition.w / 2.0f + 0.5f;

	// 노말 맵 텍스처로부터 법선 샘플링
	normalMap = normalTexture.Sample(SampleType, input.tex);

	// 법선의 범위를 (0, 1)에서 (-1, 1)로 확장
	normal = (normalMap.xyz * 2.0f) - 1.0f;

	// 반사와 굴절 좌표를 노말 값에 따라 흩뜨리며 물결치는 효과를 생성
	reflectTexCoord = reflectTexCoord + (normal.xy * reflectRefractScale);
	refractTexCoord = refractTexCoord + (normal.xy * reflectRefractScale);

	reflectionColor = reflectionTexture.Sample(SampleType, reflectTexCoord);
	refractionColor = refractionTexture.Sample(SampleType, refractTexCoord);

	// 블렌드 효과를 위해 두 텍스처 간에 선형 보간을 수행
	// lerp(x, y, s): x*(1-s) + y*s 수식을 기반으로 계산
	color = lerp(reflectionColor, refractionColor, 0.6f);

	return color;
}